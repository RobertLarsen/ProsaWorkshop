Næste mitigation
----------------

[source,bash]
------------------------------------------------
$ checksec assignments/fmt_nx
[*] '/vagrant/presentations/04-advanced-exploitation/assignments/fmt_nx'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
------------------------------------------------

Næste mitigation
----------------

[source,bash]
------------------------------------------------
$ grep fmt_nx /proc/$(pidof fmt_nx)/maps
565b4000-565b6000 r-xp 00000000 00:7b 22   /04-advanced-exploitation/fmt_nx
565b6000-565b7000 r--p 00001000 00:7b 22   /04-advanced-exploitation/fmt_nx
565b7000-565b8000 rw-p 00002000 00:7b 22   /04-advanced-exploitation/fmt_nx
------------------------------------------------

Løsning 1 - ret2libc
--------------------

Udføres `system("/bin/bash");` ser stakken således ud ved første instruktion i `system@libc`:

image::../images/ret2libc_1.png[width=600]

Løsning 1 - ret2libc
--------------------

Hvad nu hvis vi får stakken til at se sådan her ud lige inden en `ret` instruktion?:

image::../images/ret2libc_2.png[width=600]

Hvordan finder vi `system@libc`?
--------------------------------

Fandens komplekst men meget lærerigt at forsøge manuelt.

Rimeligt velbeskrevet her: http://uaf.io/exploitation/misc/2016/04/02/Finding-Functions.html

Indtil lysten til den slags dukker op kan I benytte `DynELF` klassen fra `pwntools`.

[source,python]
------------------------------------------------
class DynELF:
    ...
    def __init__(self, leak, pointer=None, elf=None):
        ...
------------------------------------------------

Opgave 6 - Lav arbitrary read funktion
--------------------------------------

Test den ved at resolve `system` fra `libc`

Opgave 7 - Returner til `system`
--------------------------------

Hvorfor fik vi ikke en shell?
-----------------------------

Det gjorde vi også:

[source,bash]
------------------------------------------------
[pid  5410] rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
[pid  5410] execve("/bin/sh", ["sh", "-c", "/bin/bash"], [/* 3 vars */]) = 0
strace: [ Process PID=5410 runs in 64 bit mode. ]
.......
[pid  5403] --- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0xdeadbeef} ---
....
------------------------------------------------

Hvorfor fik vi ikke en shell?
-----------------------------

Vi kommunikerer med processen via en socket med file descriptor 4.

Shellen snakker med stdin, stdout og stderr som har file descriptors 0, 1 og 2

Hvorfor fik vi ikke en shell?
-----------------------------

Husk `findpeersh`?

Den fandt en socket filedescriptor og kopierede den til filedescriptor 0, 1 og 2.

Vi kan gøre det samme.

Opgave 8 - Chained ret2libc
---------------------------

Vi skal gøre dette:

[source,c]
------------------------------------------------
dup2(4, 0);
dup2(4, 1);
dup2(4, 2);
system("/bin/bash");
------------------------------------------------
